{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2ea099d3-28b5-4442-9b04-aab7a1ddc444",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* Running on local URL:  http://127.0.0.1:7861\n",
      "* To create a public link, set `share=True` in `launch()`.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><iframe src=\"http://127.0.0.1:7861/\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import gradio as gr\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "try:\n",
    "    import joblib\n",
    "    model = joblib.load(\"model/air_quality_model.pkl\")\n",
    "    scaler = joblib.load(\"model/scaler.pkl\")\n",
    "except:\n",
    "    # Fallback dummy model and scaler\n",
    "    from sklearn.dummy import DummyRegressor\n",
    "    from sklearn.preprocessing import StandardScaler\n",
    "    import numpy as np\n",
    "\n",
    "    FEATURES = [\"PM2.5\", \"PM10\", \"CO\", \"NO2\", \"SO2\", \"O3\", \"Temperature\",\n",
    "                \"Humidity\", \"Wind Speed\", \"Wind Direction\", \"Precipitation\",\n",
    "                \"Traffic Density\", \"Industrial Emissions\", \"Hour\", \"Day\", \"Month\", \"Year\"]\n",
    "\n",
    "    dummy_data = pd.DataFrame([np.random.rand(len(FEATURES)) * 100 for _ in range(10)], columns=FEATURES)\n",
    "    scaler = StandardScaler().fit(dummy_data)\n",
    "    model = DummyRegressor(strategy=\"mean\").fit(scaler.transform(dummy_data), [100]*10)\n",
    "\n",
    "# Make sure FEATURES is defined\n",
    "FEATURES = [\"PM2.5\", \"PM10\", \"CO\", \"NO2\", \"SO2\", \"O3\", \"Temperature\",\n",
    "            \"Humidity\", \"Wind Speed\", \"Wind Direction\", \"Precipitation\",\n",
    "            \"Traffic Density\", \"Industrial Emissions\", \"Hour\", \"Day\", \"Month\", \"Year\"]\n",
    "\n",
    "def predict_aqi(*args):\n",
    "    df = pd.DataFrame([args], columns=FEATURES)\n",
    "    scaled = scaler.transform(df)\n",
    "    prediction = model.predict(scaled)[0]\n",
    "    return prediction\n",
    "\n",
    "iface = gr.Interface(\n",
    "    fn=predict_aqi,\n",
    "    inputs=[gr.Number(label=col) for col in FEATURES],\n",
    "    outputs=\"number\",\n",
    "    title=\"AQI Predictor\",\n",
    "    description=\"Input environment conditions to predict AQI\"\n",
    ")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    iface.launch()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70e4c5de-33b2-49e4-8fd6-ada68ed3447b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
